import sys
sys.path.append('../baseClass/')
sys.path.append('../tools/')
from Bit import Bit
from Qubit import *
from helperFunction import *
from interactCfg import *
from Circuit import Circuit
from Gate import *
from IBMQX import *
import psutil
import os

if __name__ == "__main__":
	#this is the circuit of the Grover algorithm, there is a bug 
	c = Circuit()
	q = Qubit(3)
	q1 = Qubit(4)
	H(q)
	H(q1)
	H(q1)
	CNOT(q,q1)
	H(q1)
	H(q)
	H(q1)
	X(q)
	X(q1)
	H(q1)
	CNOT(q,q1)
	H(q1)
	X(q)
	X(q1)
	H(q)
	H(q1)
	M(q)
	M(q1)
	# qubitList = []
	# for i in range(0,18):
	# 	q = Qubit()
	# 	qubitList.append(q)
	# for j in range(0,15):
	# 	CNOT(qubitList[j],qubitList[j+1])
	# for k in range(0,10):
	# 	M(qubitList[k])
	c.execute(1000)
	# q = Qubit()
	# X(q)
	# q1 = Qubit()
	# q2 = Qubit()
	# Sd(q1)
	# I(q1)
	# Y(q1)
	# H(q)
	# S(q)
	# T(q1)
	# #CNOT(q,q1)
	# #CNOT(q1,q)
	# QSprint(CNOT(q1,q))

	# q3 = Qubit()
	# #q4 = Qubit()
	# q5 = Qubit()
	# S(q3)
	# T(q5)
	# Td(q5)
	# CNOT(q5,q3)
	# H(q2)
	# M(q)
	# M(q1)
	# M(q2)
	# M(q5)
	# QSprint(q5)
	#c.exportChart(['1','2','3','4','5','6','7','8','9','10'],['0.1','0.5','0.4','0.1','0.3','0.1','0.5','0.4','0.1','0.2'])
	
	#ibm.executeQASM()
	# print('start drawing the circuit')
	# c.drawCircuit()
	# print('end drawing ')
	# d = Circuit()
	# print(Circuit.currentIDList)
	# c = Circuit()
	# print(Circuit.currentIDList)
	# del d
	# print(Circuit.currentIDList)
	# print(Circuit.instance)
	# print('-----------------------------')
	# qubit = Qubit(0)
	# QSprint(qubit)
	# qubit1 = Qubit(1)
	# H(qubit)
	# QSprint(qubit)
	# #del qubit1
	# #a = Qubits(qubit,qubit1)
	# #a.computeAmplitude()
	# qs = Qubits(qubit,qubit1)
	# QSprint(qs[0])
	# print("----------------------------------------------------------------------------------------------------")
	# QSprint(qs)
	# print("----------------------------------------------------------------------------------------------------")
	# QSprint(qubit)
	# QSprint(qubit1)
	# QSprint(CNOT(qubit,qubit1))
	# QSprint(qubit1)
	# print("----------------------------------------------------------------------------------------------------")
	# q1 = Qubit(2)
	# q2 = Qubit(3)
	# q9 = Qubit(9)
	# q7 = Qubit(7)
	# H(q7)
	# qss = Qubits(q1,q7)
	# QSprint(qss)
	# X(q2)
	# qss1 = Qubits(q9,q2)
	# QSprint(qss1)
	# print("----------------------------------------------------------------------------------------------------")
	# QSprint(CNOT(q2,q7))
	# print("----------------------------------------------------------------------------------------------------")
	# h = CNOT(q2,qubit)
	# QSprint(h)
	# print("----------------------------------------------------------------------------------------------------")
	# Y(qubit)
	# QSprint(h)
	# QSprint(qubit)
	# print(M(qubit))
	# print(M(q2))
	# print(M(q9))
	# print(M(h))



